
Data Reshape Engine

The data reshape engine performs data format transformations (e.g., splitting or slicing, merging, contraction, reshape-transpose). Data in memory often needs to be reconfigured or reshaped in the process of performing inferencing on a convolutional network. 
For example, “slice” operations may be used to separate out different features or spatial regions of an image, and “reshape-transpose” operations (common in deconvolutional networks) create output data with larger dimensions than the input dataset.

The data reshape engine maps onto TensorFlow operations such as tf.nn.conv2d_transpose, tf.concat, tf.slice, and tf.transpose.


***************************************8

1）split：将一份数据分成多份数据（每份都和原始的一样），使用时不会进行数据搬移，接下来的操作相当于对原始数据的复用。在源码中没有使用copy，而是使用share。注意和slice操作区别。

2）slice：将一个数据变成多个数据（即concat的逆过程），每一份都互不相同。源码中使用的是copy，会进行数据搬移。注意与split操作区别（两者的区别主要是体现在反向求导，SplitLayer会把top_diff的数据累加起来，而SliceLayer只需要将对应位置的top_diff拷贝到对应位置的bottom_diff中即可。）

3）concat：把多个的数据合并成一个数据（即slice的逆过程），有时相当于矩阵合并。在源码中使用的是copy，会进行数据搬移（NPU可视情况选择是否搬移）。注意，将它和merge操作区别。

例子：
t1 = [[1, 2, 3],
      [4, 5, 6]]  
t2 = [[7,  8 , 9 ], 
      [10, 11, 12]]  

第一种情况：如果concat_dim是0，那么在某一个shape的第一个维度上连，即叠放到列上：
tf.concat(0, [t1, t2]) == > 
[[1, 2, 3],
 [4, 5, 6],
 [7, 8, 9],
 [10, 11,12]]
这种情况，NPU可以直接实现。

第二种情况
tf.concat(1, [t1, t2]) ==> 
[[1, 2, 3, 7, 8, 9],
 [4, 5, 6, 10, 11, 12 ]]"
这种情况下，NPU先分别对t1和t2转置，再用move指令将数据放在一起，最后对整体的数据进行转置。

4）merge：caffe中没有merge，但有“eltwise”。tensorflow中是元素级的合并（元素相加、求平均、concat等），可以执行broadcasting。

5）reshape：不会开辟新内存，即不会发生数据搬移。源码中使用share，唯一会改变的就是指向这段数据的指针（会产生一个新的指针，该指针的shape会符合top-shape）。

6）tf.transpose：就是矩阵的转置，NPU有专门的指令。

7）tf.nn.conv2d_transpose：就是反卷积。
